module pooling (
    input clk,
    input rst_n,
    input valid_in,
    input signed [7:0] data_in0,
    input signed [7:0] data_in1,
    input signed [7:0] data_in2,
    input signed [7:0] data_in3

    output reg signed [7:0] max_out,
    output reg valid_out
  );
  integer i;
  reg signed [7:0] pool_array [0:3];

  always @(posedge clk or negedge rst_n)
  begin
    if (!rst_n)
    begin
      max_out <= 0;
      valid_out <= 0;
    end
    else if (valid_in)
    begin
      pool_array[0] = data_in0;
      pool_array[1] = data_in1;
      pool_array[2] = data_in2;
      pool_array[3] = data_in3;

      max_out = pool_array[0];
      for (i = 1; i < 9; i = i + 1)
      begin
        if (pool_array[i] > max_out)
          max_out = pool_array[i];
      end
      valid_out <= 1;
    end
    else
    begin
      valid_out <= 0;
    end
  end
endmodule
